
main: Program () Model Msg
main =
  Browser.element
    { init = init
    , update = update
    , view = view
    , subscriptions = always Sub.none
    }

-- MODEL
type alias Model =
  { input : String
  , validInput : String
  , memos : List String
  }

init : () -> ( Model, Cmd Msg )
init _ =
   ( Model "" "" []
   , Cmd.none)


-- UPDATE

type Msg
   = Input String
   | Submit
   | NewRandom Int


update : Msg -> Model -> (Model, Cmd Msg)
update msg model =
  case msg of
    Input input ->
      ( {model | input = input}, Cmd.none  )

    Submit -> 
      if isValid model.input then
        let
           selected_dictionary = select (lastChar (komojiFree model.input)) butaWords
        in
        ( { model | input =""
                  , validInput = model.input
                  , memos = model.memos ++ (model.input ++ (feedbackText model.input)):: [] }
          , Random.generate NewRandom (Random.int 1 (List.length selected_dictionary) ))
      else
        ( {model | input = ""}
        , Cmd.none)

    NewRandom n ->
      if isValid model.input then
        let
           selected_dictionary = select (lastChar (komojiFree model.validInput)) butaWords
        in
            ( { model
                | memos =
                    model.memos
                        ++ List.take 1 (List.drop n selected_dictionary)
              }
            , Cmd.none
            )
      else
        ( {model | input = ""}
        , Cmd.none)

view : Model -> Html Msg
view model =
    div
        [ h1 [] [ text "しりとり"]
        , text "ひらかなで入力してください"
        , form [ HE.onSubmit Submit ]
            [ input
                [ HE.onInput Input
                , HA.value model.input
                , HA.autofocus True
                , HA.style "width" "70%"
                ]
                []
            , button
                [ HA.disabled (String.isEmpty (String.trim model.input))
                , HA.style "width" "27%"
                ]
                [ text "Submit" ]
            ]
            , ul [ HA.style "textAlign" "left" ] (List.map viewMemo model.memos)
        ]



feedbackText : String -> String
feedbackText string =
    if  (List.member (komojiFree string) butaWords)  then
        ""
    else
        " は豚辞書にありません"


select : String -> List String -> List String
select string dict =
   List.filter (\word -> string == Maybe.withDefault "ん" (List.head (String.split "" word))) dict


isValid : String -> Bool
isValid input =
    List.all inAiueo (String.split "" input) 

inAiueo : String -> Bool
inAiueo string =
   List.member string aiueo


aiueo : List String
aiueo = 
  String.words "あ い う え お か き く け こ さ し す せ そ た ち つ て と な に ぬ ね の は ひ ふ へ ほ ま み む め も や ゆ よ ら り る れ ろ わ ー ん が ぎ ぐ げ ご ざ じ ず ぜ ぞ だ ぢ づ で ど ば び ぶ べ ぼ ぱ ぴ ぷ ぺ ぽ ぃ ぅ ぇ ぉ ゃ ゅ ょ っ ゎ"


lastChar : String -> String
lastChar input =
  case getLastChar input of
     Just "ー" -> lastChar ( String.join "" (List.reverse (List.drop 1 (List.reverse ((String.split "" input))))))
     Just "ん" -> lastChar ( String.join "" (List.reverse (List.drop 1 (List.reverse ((String.split "" input))))))
     Just char -> char
     Nothing -> "ん"


getLastChar : String -> Maybe String
getLastChar input =
  String.split "" input
  |> List.reverse
  |> List.head


komojiFree : String -> String
komojiFree input =
  String.replace "ぁ" "あ" input
  |> String.replace "ぃ" "い"
  |> String.replace "ぅ" "う"
  |> String.replace "ぇ" "え"
  |> String.replace "ぉ" "お"
  |> String.replace "ゃ" "や"
  |> String.replace "ゅ" "ゆ"
  |> String.replace "ょ" "よ"
  |> String.replace "っ" "つ"
  |> String.replace "ゎ" "わ"


butaWords : List String
butaWords = 
  String.words butadic
